{
  "variables": {
    "http_proxy": "{{env `http_proxy`}}",
    "https_proxy": "{{env `https_proxy`}}",
    "server_ip": "",
    "server_domain": "",
    "server_hostname": "",
    "build_env": "docker",
    "build_base": "sys/dbab-docker:base",
    "target_name": "sys/dbab-docker",
    "target_version": "latest"
  },

  "builders": [
    {
      "type": "docker",
      "image": "{{user `build_base`}}",
      "pull": false,
      "export_path": "dbab-docker.tar"
    }
  ],

  "post-processors": [
    {
      "type": "docker-import",
      "repository": "{{user `target_name`}}",
      "tag": "{{user `target_version`}}",
      "changes": [
        "CMD /dbab-docker-start.sh"
      ],
      "only": ["docker"]
    }
  ],

  "provisioners": [
    {
      "type": "file",
      "source": "dbab_new.deb",
      "destination": "/tmp/dbab_new.deb"

    },
    {
      "type": "file",
      "source": "dbab-docker-start.sh",
      "destination": "/dbab-docker-start.sh"

    },
    {
      "type": "shell",
      "environment_vars": [
        "etc_squid=/etc/squid/conf.d",
        "http_proxy": "{{user `http_proxy`}}",
        "https_proxy": "{{user `https_proxy`}}",
        "build_env={{user `build_env`}}",
        "server_ip={{user `server_ip`}}",
        "server_domain={{user `server_domain`}}",
        "server_hostname={{user `server_hostname`}}"
      ],
      "inline": [
        "printf '\n## Checking...\n' >&2; sleep 1; ",
        "[ ${server_hostname:+T} ] || { printf 'Variable server_hostname must be provided' >&2 && false; }",
        "[ ${server_domain:+T} ] || { printf 'Variable server_domain must be provided' >&2 && false; }",
        "[ ${server_ip:+T} ] || { printf 'Variable server_ip must be provided' >&2 && false; }",
        "server_gateway=`echo $server_ip | sed 's/\\.[^.]*$//'`",
        "cat /etc/os-release",
        "perl -v",
        ". /etc/os-release",
        "export DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical DEBCONF_NOWARNINGS=yes",
        "echo '### Customizing for' $ID under $build_env, with $etc_squid",
        
        "",
        "sleep 1; printf '\n## Installing packages...\n' >&2",
        "mv /etc/dpkg/dpkg.cfg.d/docker /tmp",
        "apt-get install --reinstall -y dbab",
        "( set -x; [ -s /tmp/dbab_new.deb ] && dpkg -i /tmp/dbab_new.deb; )",
        "#( cd /; ls -l `dpkg -L dbab` > /dev/null; )",
        "mv /tmp/docker /etc/dpkg/dpkg.cfg.d",
        
        
        "sleep 1; printf '\n## Configure DNSmasq...\n' >&2",
        "# ( set -x; ls -l /usr/share/doc/dbab/dbab-dnsmasq.*.conf; )",
        "( set -x; cp -v /usr/share/doc/dbab/dbab-dnsmasq.DNS.conf /etc/dnsmasq.d; sed 's/192.168.2/'$server_gateway'/g; s/EXAMPLE.ORG/'$server_domain'/;' /usr/share/doc/dbab/dbab-dnsmasq.DHCP.conf > /etc/dnsmasq.d/dbab-dnsmasq.DHCP.conf; head -3 /etc/dnsmasq.d/dbab-dnsmasq.DHCP.conf; )",
        
        "sleep 1; printf '\n## Configure dbab...\n' >&2",
        "echo Update ad blocking list",
        "( set -x; echo $server_ip | tee /etc/dbab/dbab.addr; /usr/sbin/dbab-get-list; /usr/sbin/dbab-add-list; ln -vs /usr/sbin/dbab-get-list /etc/cron.monthly/; )",
        "echo Enable automatic WPAD service",
        "( set -x; /usr/sbin/dhcp-add-wpad; echo host-record=$server_hostname,$server_ip | tee -a /etc/dnsmasq.d/dbab-dnsmasq.wpad.conf; printf 'nameserver 127.0.0.1\ndomain '$server_domain'\nsearch '$server_domain'\n' > /etc/resolv.conf.good; cat /etc/resolv.conf.good > /etc/resolv.conf; )",
        "echo Configure squid",
        "echo 'visible_hostname '$server_hostname > $etc_squid/visible_hostname.conf",
        "( set -x; cp -v /usr/share/doc/dbab/dbab-squid.*.conf $etc_squid/;  )",

        "",
        "sleep 2; printf '## Done!\n\n' >&2"
      ]
    }
  ]
}
